
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import subprocess
import tkinter as tk
import sqlite3
from tkinter import messagebox
from datetime import date, datetime, timedelta
from tkinter import ttk



from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\MENDOZA,BUSTERO_GYM_PROG\MENDOZA_BUSTERO_GYM_LOG\assets1\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = tk.Tk()

window.geometry("1100x700")
window.configure(bg = "#000000")

def add_gymLog():
    full_name = name_entry.get()
    if full_name:
        cursor.execute("INSERT INTO gymLogs (full_name) VALUES (?)", (full_name,))
        conn.commit()
        load_gymLog()
        clear_entries()
    else:
        messagebox.showwarning("Warning", "Please fill in all fields.")

def load_gymLog(sort_by=None):
    # Clear existing records in the treeview
    for record in gymLog_tree.get_children():
        gymLog_tree.delete(record)

    # Define the SQL query based on the sorting requirement
    if sort_by == 'today':
        start_date = datetime.now().strftime('%Y-%m-%d 00:00:00')
        end_date = datetime.now().strftime('%Y-%m-%d 23:59:59')
        query = "SELECT * FROM gymLogs WHERE in_session BETWEEN ? AND ?"
        cursor.execute(query, (start_date, end_date))
    elif sort_by == 'week':
        start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime('%Y-%m-%d 00:00:00')
        end_date = (datetime.now() + timedelta(days=(6 - datetime.now().weekday()))).strftime('%Y-%m-%d 23:59:59')
        query = "SELECT * FROM gymLogs WHERE in_session BETWEEN ? AND ?"
        cursor.execute(query, (start_date, end_date))
    elif sort_by == 'month':
        start_date = datetime(datetime.now().year, datetime.now().month, 1).strftime('%Y-%m-%d 00:00:00')
        end_date = datetime(datetime.now().year, datetime.now().month + 1, 1) - timedelta(days=1)
        end_date = end_date.strftime('%Y-%m-%d 23:59:59')
        query = "SELECT * FROM gymLogs WHERE in_session BETWEEN ? AND ?"
        cursor.execute(query, (start_date, end_date))
    elif sort_by == 'year':
        start_date = datetime(datetime.now().year, 1, 1).strftime('%Y-%m-%d 00:00:00')
        end_date = datetime(datetime.now().year, 12, 31).strftime('%Y-%m-%d 23:59:59')
        query = "SELECT * FROM gymLogs WHERE in_session BETWEEN ? AND ?"
        cursor.execute(query, (start_date, end_date))
    else:
        # Default: fetch all records
        start_date = datetime.now().strftime('%Y-%m-%d 00:00:00')
        end_date = datetime.now().strftime('%Y-%m-%d 23:59:59')
        query = "SELECT * FROM gymLogs WHERE in_session BETWEEN ? AND ?"
        cursor.execute(query, (start_date, end_date))

    gymLogs = cursor.fetchall()

    for row in gymLogs:
        gymLog_tree.insert("", "end", values=(row[0], row[1], row[2]))

def clear_entries():
    name_entry.delete(0, tk.END)
        
def update_gymLog():
    selected_gymLog = gymLog_tree.selection()
    if selected_gymLog:
        gymLog_id = int(gymLog_tree.item(selected_gymLog, "values")[0])
        name = name_entry.get()
        if name:
            cursor.execute("UPDATE gymLogs SET full_name=?  WHERE log_id=?", (name, gymLog_id))
            conn.commit()
            load_gymLog()
            clear_entries()
        else:
            messagebox.showwarning("Warning", "Please fill in all fields.")
    else:
        messagebox.showwarning("Warning", "Please select a record to update.")        
 
 
def delete_gymLog():
    selected_gymLog = gymLog_tree.selection()
    if selected_gymLog:
        gymLog_id = int(gymLog_tree.item(selected_gymLog, "values")[0])
        cursor.execute("DELETE FROM gymLogs WHERE log_id=?", (gymLog_id,))
        conn.commit()
        load_gymLog()
        clear_entries()
    else:
        messagebox.showwarning("Warning", "Please select a gymLog to delete.")


def search():
    search = search_entry.get()
    print("Searching..." + search)
    
    # Clear the treeview
    for item in gymLog_tree.get_children():
        gymLog_tree.delete(item)
    
    cursor.execute(
        "SELECT * FROM gymLogs WHERE full_name LIKE ?",
        ('%' + search + '%',)
    )
    
    gymLog = cursor.fetchall()
    
    # Insert the results into the treeview
    if gymLog:
        for row in gymLog:
            gymLog_tree.insert("", "end", values=(row[0], row[1], row[2]))
        
        # Clear the search entry field
        search_entry.delete(0, tk.END)
    else:
        print("No matching records found.")

def on_select(event=None):
    selected_option = time_combobox.get()
    if selected_option == 'Today':
        load_gymLog('today')
    elif selected_option == 'This Week':
        load_gymLog('week')
    elif selected_option == 'This Month':
        load_gymLog('month')
    elif selected_option == 'This Year':
        load_gymLog('year')
    else:
        load_gymLog()

def logout():
    window.destroy()  
    subprocess.run(['python', 'login_.py'])
 
 
 
conn = sqlite3.connect("gym.db")
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS gymLogs (
    log_id INTEGER PRIMARY KEY,
    full_name TEXT,
    in_session DATETIME DEFAULT CURRENT_TIMESTAMP
)''')
       
    
        
canvas = Canvas(
    window,
    bg = "#000000",
    height = 700,
    width = 1100,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    122.0,
    169.5,
    image=entry_image_1
)
name_entry = Entry(
    bd=0,
    bg="#E4E4E4",
    fg="#000716",
    highlightthickness=0
)
name_entry.place(
    x=20.0,
    y=152.0,
    width=204.0,
    height=33.0
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
add = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=add_gymLog,
    relief="flat"
)
add.place(
    x=20.0,
    y=215.0,
    width=204.0,
    height=35.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
search_entry = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=search,
    relief="flat"
)
search_entry.place(
    x=875.0,
    y=56.0,
    width=171.40155029296875,
    height=35.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
edit = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=update_gymLog,
    relief="flat"
)
edit.place(
    x=20.0,
    y=276.0,
    width=204.0,
    height=35.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
delete = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=delete_gymLog,
    relief="flat"
)
delete.place(
    x=20.0,
    y=338.0,
    width=204.0,
    height=35.0
)

canvas.create_text(
    20.0,
    127.0,
    anchor="nw",
    text="FullName",
    fill="#D2D2D2",
    font=("Inter Bold", 14 * -1)
)

# Define options for the dropdown
options = ['Today', 'This Week', 'This Month', 'This Year']

# Create a combobox for the dropdown
time_combobox = ttk.Combobox(window, width=30, values=options)
time_combobox.place(x=295.0, y=70)

# Set default value
time_combobox.current(0)

time_combobox.bind('<<ComboboxSelected>>', on_select)



window.title("Gym Log")

gymLog_tree = ttk.Treeview(window, columns=('Log ID', 'Full Name', 'In Session'), show='headings')


# Configure headings
gymLog_tree.heading('Log ID', text='Log ID', anchor=tk.CENTER)
gymLog_tree.heading('Full Name', text='Full Name', anchor=tk.CENTER)
gymLog_tree.heading('In Session', text='In Session', anchor=tk.CENTER)

# Configure columns
gymLog_tree.column('Log ID', anchor=tk.CENTER, width=100)
gymLog_tree.column('Full Name', anchor=tk.CENTER, width=350)
gymLog_tree.column('In Session', anchor=tk.CENTER, width=150)
gymLog_tree.grid()   

canvas.create_window(671.0, 394.0, window=gymLog_tree, height=530, width=750)

canvas.create_text(
    295.0,
    31.0,
    anchor="nw",
    text="SortBy",
    fill="#D2D2D2",
    font=("Inter Bold", 14 * -1)
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    712.0,
    73.5,
    image=entry_image_3
)
search_entry = Entry(
    bd=0,
    bg="#E4E4E4",
    fg="#000716",
    highlightthickness=0
)
search_entry.place(
    x=585.0,
    y=56.0,
    width=254.0,
    height=33.0
)

button_gymLog = PhotoImage(
    file=relative_to_assets("gymlogs.png"))
gymLog = Button(
    image=button_gymLog,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("gymLog clicked"),
    relief="flat"
)
gymLog.place(
    x=0.0,
    y=34.0,
    width=176.0,
    height=52.0
)

canvas.create_text(
    585.0,
    31.0,
    anchor="nw",
    text="Search\n",
    fill="#D9D9D9",
    font=("Inter Bold", 14 * -1)
)

load_gymLog()


image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    671.0,
    394.0,
    image=image_image_1
)


button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=logout
)
button_5.place(
    x=19.0,
    y=615.0,
    width=131.0,
    height=46.0
)



window.resizable(False, False)
window.mainloop()
